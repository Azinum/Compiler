// test.lang

// movl $0, -4(%ebp) # -> int _ = 0;
// movl $value, -(i+sizeof(type))(%ebp)
//

/*
Registers:
 eax
 ecx
 edx
 esi
 edi
 ebx
*/

asm {
"  .subsections_via_symbols"
"  .align 4"
}

// int x = 0;
// do {
//   print2(x);
//   x += 1;
// } while (x <= 5);
func testWhile() {
asm {
"  movl $0, -4(%ebp)"
"begin:"
"  subl $8, %esp"
"  movl -4(%ebp), %eax"
"  movl %eax, (%esp)"
"  calll _print2"
"  addl $8, %esp"
}
asm {
"  addl $1, -4(%ebp)"
"  cmpl $5, -4(%ebp)"
"  jle begin"
}
  return;
}

// int a, b;
// print3(a + b, b);
func testFuncCall() {
asm {
"  movl $13, -4(%ebp)"
"  movl $12, -8(%ebp)"
"  movl -4(%ebp), %eax"
"  movl -8(%ebp), %ecx"
"  addl %eax, -8(%ebp)"
}
  print3();
  return;
}

func add() {
asm {
"  movl 12(%ebp), %eax"
"  addl 8(%ebp), %eax"
}
  return;
}

func hello() {
asm {
"  movl $5, -4(%ebp)"
"  movl $6, -8(%ebp)"
"  movl -4(%ebp), %eax"
"  movl -8(%ebp), %ecx"
}
  print3();

  // testFuncCall();
  // testWhile();
  return;
}
